"LAMMPS WWW Site"_lws - "LAMMPS Documentation"_ld - "LAMMPS Commands"_lc :c

:link(lws,http://lammps.sandia.gov)
:link(ld,Manual.html)
:link(lc,Section_commands.html#comm)

:line

fix smd/setvel command :h3

[Syntax:]

fix ID group-ID smd/setvel vx vy vz keyword value ... :pre

ID, group-ID are documented in "fix"_fix.html command :ulb,l
setforce = style name of this fix command :l
vx,vy,vz = velocity component values :l
any of vx,vy,vz can be a variable (see below) :l
zero or more keyword/value pairs may be appended to args :l
keyword = {region}  :l
  {region} value = region-ID
    region-ID = ID of region particles must be in to have added velocity :pre
:ule

[Examples:]

fix 1 all smd/setvel 

[Description:]

Set each component of velocity on each particle in the group to the specified
values vx,vy,vz.  This erases all previously computed velocities on the
particle, though additional fixes could add new velocities.

Any of the vx,vy,vz values can be specified as NULL which means do not
alter the force component in that dimension.

Any of the 3 quantities defining the velocity components can be specified
as an equal-style or atom-style "variable"_variable.html, namely {vx},
{vy}, {vz}.  If the value is a variable, it should be specified as
v_name, where name is the variable name.  In this case, the variable
will be evaluated each timestep, and its value used to determine the
velocity component.

Equal-style variables can specify formulas with various mathematical
functions, and include "thermo_style"_thermo_style.html command
keywords for the simulation box parameters and timestep and elapsed
time.  Thus it is easy to specify a time-dependent velocity field.

Atom-style variables can specify the same formulas as equal-style
variables but can also include per-particle values, such as particle
coordinates.  Thus it is easy to specify a spatially-dependent velocity
field with optional time-dependence as well.

If the {region} keyword is used, the particle must also be in the
specified geometric "region"_region.html in order to have velocity added
to it.

:line

Styles with a {cuda} suffix are functionally the same as the
corresponding style without the suffix.  They have been optimized to
run faster, depending on your available hardware, as discussed in
"Section_accelerate"_Section_accelerate.html of the manual.  The
accelerated styles take the same arguments and should produce the same
results, except for round-off and precision issues.

These accelerated styles are part of the USER-CUDA package.  They are
only enabled if LAMMPS was built with that package.  See the "Making
LAMMPS"_Section_start.html#start_3 section for more info.

You can specify the accelerated styles explicitly in your input script
by including their suffix, or you can use the "-suffix command-line
switch"_Section_start.html#start_7 when you invoke LAMMPS, or you can
use the "suffix"_suffix.html command in your input script.

See "Section_accelerate"_Section_accelerate.html of the manual for
more instructions on how to use the accelerated styles effectively.

:line

[Restart, fix_modify, output, run start/stop, minimize info:]

Currently, no part of USER-SMD supports restarting nor minimization.

No information about this fix is written to "binary restart
files"_restart.html.  None of the "fix_modify"_fix_modify.html options
are relevant to this fix.

This fix computes a global 3-vector of forces, which can be accessed
by various "output commands"_Section_howto.html#howto_15.  This is the
total force on the group of particles for which this fix is defined. The
vector values calculated by this

fix are "extensive".

No parameter of this fix can be used with the {start/stop} keywords of
the "run"_run.html command.

[Restrictions:]

This fix is part of the USER-SMD package.  It is only enabled if
LAMMPS was built with that package. See the "Making LAMMPS"_Section_start.html#start_3
section for more info.

[Related commands:]

"fix setforce"_fix_setforce.html, "fix addforce"_fix_addforce.html, "fix aveforce"_fix_aveforce.html

[Default:] none
